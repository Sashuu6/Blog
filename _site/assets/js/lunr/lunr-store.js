var store = [{
        "title": "Things to do after installing Fedora 28",
        "excerpt":"   Fedora has been my favourite from the day I started using Fedora. As Fedora was sponsored by Red Hat, I had to make sure I gave it a try. I started my linux life using Ubuntu. Switching from Ubuntu to Fedora was not a easy task. I found first few days of using Fedora a bit hard. So, after gaining some experience using Fedora, gave me an idea to write a blog about the initial steps to be performed by a newbie Fedora user or a user who has just installed Fedora. When I was planning to write the blog, came the release of Fedora 28.   These are the steps I followed after installing Fedora 28.   First, we will switch to superuser.   $ sudo su  There are few rpm packages to download. So,   $ cd Downloads  $ mkdir post-fedora-install  Now, lets update the OS. If you are new to Fedora, the fedora’s update function will automatically update the repo list and will install the latest packages to the system.   $ dnf -y update   Lets start the SSH server. SSH will help to connect to your system remotely from another system in the same network.   $ systemctl start sshd  $ systemctl enable sshd   Lets install RPM fusion repository into the system. The fusion repository will help to install all free and non free 3rd party applications.   $ rpm -ivh https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-28.noarch.rpm  $ rpm -ivh https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-28.noarch.rpm  $ dnf -y update   If you are using GNOME, installing the GNOME tweak tool will help you customize the desktop environment.   $ dnf -y install gnome-tweak-tool   Lets install some media codecs to view all media files.   $ dnf -y install gstreamer-plugins-base gstreamer1-plugins-base gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer1-plugins-ugly gstreamer-plugins-good-extras gstreamer1-plugins-good-extras gstreamer1-plugins-bad-freeworld ffmpeg gstreamer-ffmpeg    Lets install VLC.   $ dnf -y install vlc   Lets install Stacer. Stacer is an application to view system information and monitor all the system resources. As stacer is an open-source application, we must first download it from github.   $ wget https://github.com/oguzhaninan/Stacer/releases/download/v1.0.8/stacer-1.0.8_x64.rpm   Now lets install the downloaded rpm file.   $ dnf -y install stacer-1.0.8_x64.rpm   Now lets install the downloaded rpm file.   $ dnf -y install stacer-1.0.8_x64.rpm   Lets install a torrent client. qbittorrent works just fine for Fedora 28.   $ dnf -y install qbittorrent   If you like to download videos from youtube. Then worry not, here comes youtube-dl. The youtube-dl is a commandline function to download youtube videos.   $ dnf -y install youtube-dl   Consider Fedora is your daily driver workstation. You might need to take screenshots or custom screenshots. Shutter snipping tools is the best alternative for Fedora.   $ dnf -y install shutter   Lets install unzip for uncompressing files.   $ dnf -y install unzip   Lets install java plugins for web browsers.   $ dnf -y install icedtea-web java-openjdk   Lets install java JDK.   $ yum install -y java-1.8.0-openjdk-devel   If you develop programs in C, you will need development tools.   $ dnf -y group install 'Development Tools'   Everyone has an IDE preference, I like to use Sublime. First we must import the sublime repo.   $ rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg   We then add the repo using config manager.   $ dnf config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo   Now, we are ready to install Sublime IDE.   $ dnf -y install sublime-text   If you are a gamer, you must have steam. For installing steam, we need to add the steam repo into the system.   $ dnf -y config-manager --add-repo=http://negativo17.org/repos/fedora-steam.repo   Now, lets install the update the repo list.   $ dnf -y update   Lets install Steam.   $ dnf -y install steam   This is it folks. These steps helped me make my Fedora be used as a daily driver.  ","categories": ["Linux","Fedora"],
        "tags": [],
        "url": "https://www.sashwat.in/linux/fedora/things-to-do-after-installing-fedora-28/",
        "teaser":"https://www.sashwat.in/assets/images/blog/things-to-do-after-installing-fedora-28.jpeg"},{
        "title": "Setup wake on LAN on local server",
        "excerpt":"   Why Wake on LAN? Wake on LAN is program to wake a system which is under deep sleep. That is, the system is shut down with power access. A system with an enabled Wake-on-LAN feature can be turned on using a special packet. This special packet is sent by the client remotely.   To implement Wake-On-LAN on the server, we need to install ethtool on our server and wakeonlan commanline program on our personal system.   First we will setup our server:-           Enable wake-on-LAN on BIOS settings. Enter into BIOS and search for wake on LAN and enable it. Make sure the ethernet cable connect from the server to the switch or router has all the 8 pins connected. This is because the magic packet is sent via a dedicatd pin, usually last 2 pins. Install ethtool into the server.       (Ubuntu / Debian)       $ sudo apt install ethtool           (Fedora)       $ sudo dnf install ethtool           (RHEL / CentOS)        $ sudo yum install ethtool                Now let’s find the name of ethernet port present in the system. This command will also reveal the mac address.       $ ip a           The above command will output the ethernet port name (Lets consider the ethernet name to be enp9s0).            Let’s check if ethtool detects the port.       $ sudo ethtool enp9s0                Now, let’s activate wake on lan.       $ sudo ethtool -s enp8s0 wol g                Now, we will setup wake on client on your system. i.e, the system that will be used to wake the server.       (Ubuntu / Debian)       $ sudo apt install etherwake           (Mac)       $ brew install wakeonlan           (Fedora / RHEL / CentOS)       $ wget http://gsd.di.uminho.pt/jpo/software/wakeonlan/downloads/wakeonlan-0.41-0.fdr.1.noarch.rpm  $ rpm -Uvh wakeonlan-0.41-0.fdr.1.noarch.rpm           Now, we can wake the system using the wakeonlan command. Execute the following command.      $ wakeonlan mac-address   The above command will wake your system.  ","categories": ["Linux","Networking"],
        "tags": [],
        "url": "https://www.sashwat.in/linux/networking/wake-on-lan-on-local-server/",
        "teaser":"https://www.sashwat.in/assets/images/blog/setup-wake-on-lan.jpg"},{
        "title": "Setup Localhost in MacOS",
        "excerpt":"   I first started developing commerial products using HTML, CSS, Javascript and many more languages that were used to code client-side of a web application. I first encountered server-side languages while having a technical conversation with one of my seniors. This conversation motivated to learn PHP. While surfing the internet, I found we couldn’t execute server-side languages like client-side. That is, I couldn’t see the output just by executing the code via a browser. To execute server-side languages like PHP, I had to establish a server inside my mac.   The following are the steps I used to setup a localhost on my mac. On mac, we dont have to install a server, it’s already pre-installed. We just have to enable it.      $ sudo apachectl start   To check whether the server is not running or not, go to http://localhost on the mac’s browser. PHP is also preinstalled on mac, we just have to enable it. First, we have to edit the server’s config file.      $ sudo nano /etc/apache2/httpd.conf   Now, we will search for PHP in this file using ctrl+w Remove # from the below line.      LoadModule php7_module libexec/apache2/libphp7.so   Restart apache server      $ sudo apachectl restart   We have a create a folder named “Sites” on the home directory.      $ sudo mkdir /Users/&lt;--your_username--&gt;/Sites   Lets save a file named index.php with the following contents.      &lt;?php echo \"Hello From Sites Folder!”; phpinfo();?&gt;    We have to add the Sites fold on the config file. Edit the file using the following command.      $ sudo nano /etc/apache2/httpd.conf   Inside the file, search for the word “library” using ctrl+w. Replace /Library/WebServer/Documents with /Users/&lt;–your_username–&gt;/Sites Now, we need a database and a DBMS for the localhost. Lets download mysql for mac. First we will download MySQL from this link. Install MySQL from dmg file. Now, we will configure MqSQL by opening MySQL from system preferences. Add a password and click legacy password. After this step, just click “start MySQL server”. You can use sql through bash by executing the following command.      $ /usr/local/mysql/bin/mysql -u root -p   Or you can use Sequel pro. Sequel pro is an application that can be used to any database remotely. That is, it can be used to connect to localhost and anyother server established on the network. Now, we will make the server communication encrypted. That is, we will enable SSL/HTTPS on localhost. Execute the following command to edit the config file.      $ sudo nano /etc/apache2/httpd.conf   Search for socache_shmcb_module using ctrl+w. Remove # from the following lines.      socache_shmcb_module libexec/apache2/mod_socache_shmcb.so   serach for LoadModule ssl_module libexec/apache2/mod_ssl.so and remove # from it.      LoadModule ssl_module libexec/apache2/mod_ssl.so   Delete # from Include /private/etc/apache2/extra/httpd-ssl.conf      /private/etc/apache2/extra/httpd-ssl.conf   We have to replace www.example.com:443 with localhost from the below file.      $ sudo nano /etc/apache2/extra/httpd-ssl.conf   Replace Library/WebServer/Documents. Replace that with /Users/&lt;–your_username–&gt;/Sites Add the following lines below       &lt;Directory \"/Users/&lt;--your_username--&gt;/Sites\"&gt;      Options All      MultiviewsMatch Any      AllowOverride All      Require all granted     &lt;/Directory&gt;   Open the following config file.      $ sudo nano /etc/ssl/openssl.cnf   Add the following lines at the end.      [ san ]     subjectAltName                  = DNS:localhost   Now we generate a key using openSSL.      $ sudo openssl req -extensions san -config /etc/ssl/openssl.cnf -x509 -nodes -newkey rsa:4096 -keyout /private/etc/apache2/server.key -out /private/etc/apache2/server.crt -days 365 -subj \"/C=your_country/ST=your_state/L=your_city/O=hostname/CN=localhost\"   Now we will add the certificate using the following command.      $ sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /private/etc/apache2/server.crt   Now just restart the apache server.      $ sudo apachectl restart   We have not successfully established a server inside Mac.  ","categories": ["Linux","MacOS"],
        "tags": [],
        "url": "https://www.sashwat.in/linux/macos/setup-localhost-mac/",
        "teaser":"https://www.sashwat.in/assets/images/blog/localhost-on-mac.jpg"},{
        "title": "My Take On DevOps",
        "excerpt":"   What is DevOps?   I heard this term first when I was doing my internship at Appfabs. They focused on DevSecOps as they were a Security based company. So, to understand DevSecOps, I had to know what is DevOps. The first thing I was told that DevOps is a methodology, not a technology. DevOps is a methodology used in SDLC (Software Development Life Cycle) where the development team and operations team work together from designing stage to production support. To understand DevOps and why DevOps was introduced, we need to know the methods used before DevOps was introduced.   All these started when the waterfall model was introduced into SDLC. This model was best suited when:-     The product requirements are clear and fixed.   The product definition is stable. That is, the product’s client has a clear cut idea on how the product must be.   The project has very least risk during development.   The main disadvantages using this method was:-     It was slow.   Change implement was slow.   As in software field, slow means loss. Using this method in huge and sensitive projects gave companies huge losses. Keeping the disadvantages in mind, a new model was introduced that could fix all the disadvantages of the waterfall model. Thus, came the Agile methodology. Agile methodology brought continuous iteration in product development and testing throughout the SDLC.   The Agile methodology is bested when:-     The product requirements frequently change.   The product requires faster development.   And guess what? even this method didn’t work out for many companies, due to:-     Lack of agility in the operations phase of the product lifecycle.   The issue in the code environment. That is, the code works perfectly fine in developer’s PC, but won’t work on the production environment (Server).   The deployment of the product is linear.   To solve the disadvantages in agile methodology, the DevOps was introduced. The DevOps was best suited when:-     The product’s requirement changed frequently.   When the Operations team needs to become agile.   For bridging the gap between the development team and the operations team.   To understand DevOps better, we will learn a case study of a big shot company like Facebook who finally used DevOps due to their product’s need. In 2011, Facebook introduced a major update that includes many cool features like timeline support, music support and many more. The public was notified about this new release. As Facebook as a huge hit during that time, all the active Facebook users (almost 500 million) started using Facebook to use these features. As Facebook’s servers during that time were not prepared to handle this huge traffic, it got shut down causing a server meltdown. Added to this major issue, the new features got a mixed opinion among the users. That is, many users loved it, other users absolutely hated it and few requested for modification. These kinds of reaction created a chaotic situation in Facebook headquarters. To solve this issue, they brought in DevOps and introduced a technique called “Dark Launching”. The “Dark Launching” is a type of product release technique in which:-     New features will be first released to a smaller group of users (mainly internal BETA testers). There will be constant communication between the team and the BETA testers. The communication involves taking feedback and other techniques that help to improve the features to the user’s need.   When the team gets an assurance that the features can be released to the public, they release it to public BETA and then to the public through multiple product releases.      Facebook achieves “Dark Launching” via the use of the delivery pipeline. A delivery pipeline is a set of steps that a code goes through till it reached production. A pipeline contains an automated building, testing and deploying tools that work together till the product’s release.   So after learning a case, we can say that “DevOps is a software development approach that involves continuous development, testing, integration, deployment and monitoring throughout the development cycle.”   DevOps Lifecycles   The lifecycle represents the stages in DevOps:-     Continuous Development: The continuous development involves the product’s development is split into smaller development cycles.   Continuous Testing: This cycle involves the Quality Assurance team identifying any bugs or errors in the code after every development cycle.   Continuous Integration: This cycle involves integrating the new code with the existing code present in the production environment.   Continuous Deployment: This cycle involves the deployment of code into the environment. The deployment is done in such a way that, it doesn’t affect the product’s current network traffic.   Continuous Monitoring: The monitoring helps the team to monitor changes in the application after every lifecycle.   DevOps Tools      The main advantage that DevOps gave us is “Automation”. The developer can automate the whole operations process in the software lifecycle. Automation in DevOps is achieved using tools at different stages of its cycle. The following tools (that I have used) are used at different stages:-     Plan - Jira   Code - Git   Build - Gradle, Maven   Test - Selenium, JUnit   Integrate - Jenkins   Deploy - Docker   Operate - Ansible   Monitor - Nagios, slack   Let’s consider an example of a company that has implemented DevOps methodology in their product and have used few tools for automation. The tool Jenkins (integration tool) detects changes in code and automatically triggers a build using tools like Gradle or Maven. After the build, Jenkins will deploy the code for testing. The testing is done by test tools like Selenium (if web app), JUnit (For Java apps) or any other testing tool. The deployment is handled using Docker. The running code is then monitored by tools like Nagios, Splunk or ELK Slack.   ","categories": ["DevOps"],
        "tags": [],
        "url": "https://www.sashwat.in/devops/my-take-on-devops/",
        "teaser":"https://www.sashwat.in/assets/images/blog/my-take-on-devops/devops-cover.png"}]
