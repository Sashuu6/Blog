<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-29T10:45:27+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sashwat’s Blog</title><subtitle>My tech and other stuff's blog</subtitle><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><entry><title type="html">Working with Git</title><link href="http://localhost:4000/devops/git/working-with-git/" rel="alternate" type="text/html" title="Working with Git" /><published>2019-02-13T00:00:00+05:30</published><updated>2019-03-01T18:35:34+05:30</updated><id>http://localhost:4000/devops/git/working-with-git</id><content type="html" xml:base="http://localhost:4000/devops/git/working-with-git/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/working-with-git.jpeg&quot; alt=&quot;Working-with-Git&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;git&quot;&gt;Git&lt;/h1&gt;

&lt;p&gt;As we have learned what git and version control is, from my &lt;a href=&quot;https://www.sashwat.in/devops/git/introduction-to-git/&quot;&gt;previous blog&lt;/a&gt;. Now, we will learn git commands, a developer will use at his early stages. To know the version of the git installed inside the computer, goto terminal and type:-&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-version.png&quot; alt=&quot;git --version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, for using git, you need a service that uses git as version control. The service will act as your central / remote / online repository for your git repositories. You can use any service like github, gitlab, bitbucket and many more. I am using github for my projects. Goto any service and create an account in them. Goto the service and create a repository for learning git.&lt;/p&gt;

&lt;p&gt;Now, we will configure the git installed in the computer&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;test-repo &lt;span class=&quot;c&quot;&gt;# to create a test repo folder&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;test-repo &lt;span class=&quot;c&quot;&gt;# got inside the folder&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init &lt;span class=&quot;c&quot;&gt;# to initialise the folder as a git repository&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-init.png&quot; alt=&quot;git-init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating a local repo, we will to link the repository to a service that git like github, gitlab etc.
We will create a repository in Gitlab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/gitlab-example.png&quot; alt=&quot;gitlab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, link the local repository created to the remote repository created o gitlab or any other server. You can do that by running the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add name url
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-add-repo.png&quot; alt=&quot;adding-repo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you see the above image the command executed is &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin https://gitlab.com/Sashuu6/test-repo.git&lt;/code&gt;, origin attribute defines the original path of repository from where it is taken. The URL after origin is taken as the repository’s source URL. After this step, we need to set the upstream. That is, you have to set the branch to which you are going to upload the code.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;--set-upstream&lt;/span&gt; origin branch-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-upstream.png&quot; alt=&quot;adding-upstream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, if you dont want to do all these steps. That is, creating local repository using &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;, add remote link using &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt; and setup upstream using &lt;code class=&quot;highlighter-rouge&quot;&gt;git push --set-upstream origin master&lt;/code&gt;. You can just create the repository on github or gitlab and just clone the repository.&lt;/p&gt;

&lt;p&gt;You can clone a git repository using:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;URL&lt;/li&gt;
  &lt;li&gt;SSH&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-clone-techniques.png&quot; alt=&quot;adding-clone-techniques&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to clone a git repository using URL, you can do that using the following.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone repo-url
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-clone-using-url.png&quot; alt=&quot;cloning-repo-using-URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you clone using URL, everytime you try to push code into the github / gitlab (or any remote repository), the console will ask for username and password. If you dont want that, you can use ssh.&lt;/p&gt;

&lt;p&gt;For using SSH, you need to do setup you system. You need to generate keys for communication. You can do that using the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your_email@example.com&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After executing the above command, you will be prompted just press enter. You might be asked for password, if you are using a public computer, then you should keep it or else no need. You need to copy the key generated to github or gitlab. Enter the following command to view the key.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generated ID will be displayed on the console. To validate if it is correct or not, it will start from &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt;. Copy the key and goto github settings (if using github) and goto ‘SSH and GPG Keys’ and click ‘new SSH Key’ and give a title (Your PC hostname) and paste the copied key to the next field and save. Now, we can clone using SSH.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh clone ssh-url
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-clone-using-ssh.png&quot; alt=&quot;cloning-repo-using-SSH&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have successfully created a git repository. We will now configure the git engine installed in our system. The configuration involves telling who we are. That is, username and user email. We can do that as follows.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;yourname&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# to set your name&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;youremail&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# to set your email&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-config.png&quot; alt=&quot;git-config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to enable colour highlighting for your git console, just run the following commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; color.ui &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; color.status auto
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; color.branch auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-ui-color.png&quot; alt=&quot;git-ui-color&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When, we have to write huge commit message, we need a text editor linked to it. For doing that, we use the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor editor-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-core-editor.png&quot; alt=&quot;git-editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, if you see, I have given all config commands an tag &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt;, using this tag applies the configuration to your system and will be automatically implemented to all the git repositories you create inside your computer. If you are using git on your college computer, then from your git repository, run these configuration commands without using &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Now, we have added new configurations to the git repository. To view the configuration, use the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we have setup the git repository. Now, we will learn to make commits and push code to remote (Github or Gitlab or any other) repository. Now we have added code to the repository and now we want to make a commit. First, we need to prepare the files that needs to be committed. We call it staging process. You can do that using the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add file-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other attributes for &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;. I use &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; because, it will select all the changes made in current directory and it’s sub folders. If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, it will select only the files present on the current directory. It will not select the sub folders.&lt;/p&gt;

&lt;p&gt;Now, we will commit the staged files. Use the following command to commit changes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Replace message with your message. If you have to write a huge message, just type `git commit’, your prefered editor will pop up and type the message.&lt;/p&gt;

&lt;p&gt;As we have commited the code, we need to push it to the remote repository. You can do that using the following code.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/working-with-git/git-add-commit-push.png&quot; alt=&quot;git-add-commit-push&quot; /&gt;&lt;/p&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Introduction to Git</title><link href="http://localhost:4000/devops/git/introduction-to-git/" rel="alternate" type="text/html" title="Introduction to Git" /><published>2019-01-29T00:00:00+05:30</published><updated>2019-01-29T18:35:34+05:30</updated><id>http://localhost:4000/devops/git/introduction-to-git</id><content type="html" xml:base="http://localhost:4000/devops/git/introduction-to-git/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/introduction-to-git/introduction-to-git.png&quot; alt=&quot;Introduction to Git&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Git is a distributed version control for tracking changes and to maintain multiple versions of code during the development of a software project. To understand Git, we should understand version control.&lt;/p&gt;

&lt;h1 id=&quot;version-control&quot;&gt;Version Control&lt;/h1&gt;

&lt;p&gt;A version control a.k.a source control a.k.a revision control is an application that helps to maintain versions of a code. Before we continue any further, we must know some important terms that will be used while we study version control:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Repository: A repository is a place to store the code and other files created and modified during the development of the application. A repository also maintains the history of the code and other files generated during the development of the program.&lt;/li&gt;
  &lt;li&gt;Trunk: Trunk is the master branch of the git repository. That is, it is the main development line of the repository. All the branches merged will at last merge with this line to form the main line.&lt;/li&gt;
  &lt;li&gt;Tags: Tag is a descriptive name given to a specific version of the project. It forms as an memorable alternative to the id generated by version control.&lt;/li&gt;
  &lt;li&gt;Branch: A branch generates multiple development lines for the repository. This feature helps when there are multiple people working on the same project.&lt;/li&gt;
  &lt;li&gt;pull: Pulling is the process of downloading recent changes from the central repository to the computer’s local repository. If the repository is being downloaded for the first time, it is called cloning.&lt;/li&gt;
  &lt;li&gt;Pushing: Pushing is the process of uploading all the changes into the central server.&lt;/li&gt;
  &lt;li&gt;Committing: Committing is the process through which the version control records and stores changes to the central repository. The committing process also helps to document the changes done by the developer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is, each change in the program’s code can be recorded during the development of the application. The major advantages of version control are:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If the developer’s recent change has crashed, he/she can revert back to his previous versions.&lt;/li&gt;
  &lt;li&gt;A developer can compare different versions of his code for bug fixing, release documentation and many more purposes.&lt;/li&gt;
  &lt;li&gt;Version control helps in efficient usage team members during development of group projects as multiple developers can contribute to the project. Each developer can track changes done by each developer to the project.&lt;/li&gt;
  &lt;li&gt;Version control supports branching, a method to create multiple workflow that doesn’t affect the master branch. The developer can also merge these multiple branches to the master line.&lt;/li&gt;
  &lt;li&gt;Acts as a backup for the code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A version control works on the principle of graph data structure. That is, each change recorded during commit forms a node in the graph data structure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/introduction-to-git/git-graph-flow.png&quot; alt=&quot;Version control flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above image is self explanatory on how version’s branching and merging works using graph data structure.&lt;/p&gt;

&lt;h1 id=&quot;types-of-version-control&quot;&gt;Types of Version Control&lt;/h1&gt;

&lt;p&gt;The types of version control are:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Local version control&lt;/li&gt;
  &lt;li&gt;Centralized version control&lt;/li&gt;
  &lt;li&gt;Distributed version control&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A local version control maintains versions of the code on the local computer. One of the most common methods of maintaining versions is local version control. The versions are maintained as different files. Due to this methodology, there is a great chance for accidental loss of data due to accidental changes to the wrong file.&lt;/p&gt;

&lt;p&gt;A centralized version control is a version control approach through which different versions of the code are maintained on a centralized server. A centralized version control can store versions of code and has a list of user’s who has the privilege to access the repository (Central code). An example of centralized version control is Tortoise SVN.&lt;/p&gt;

&lt;p&gt;A distributed version control is a type of version control system that helps to clone the repository in which the code is present along with it’s full history. The main advantage of this method is that, if any of the central servers fails, the developer can restore the repository by uploading (pushing) the code to the server. That is, a distributed version control creates a complete backup of the repository into the local computer. An example of distributed version control is git.&lt;/p&gt;

&lt;p&gt;The popular version systems are:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Git&lt;/li&gt;
  &lt;li&gt;SVN (Apache Subversion)&lt;/li&gt;
  &lt;li&gt;Mercurial&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-is-git&quot;&gt;What is Git?&lt;/h1&gt;

&lt;p&gt;Git is distributed version control application that comes under General Public License 2 (GPL 2). Git was developed by Linus Torvalds during the development of Linux kernel in 2005. As git comes under distributed version control, the local repository of projects developed using git will have complete history of changes irrespective of internet access or access to the server. Git is developed using C, Python, TCL,Perl and Shell.&lt;/p&gt;

&lt;h1 id=&quot;installing-git&quot;&gt;Installing Git&lt;/h1&gt;

&lt;h2 id=&quot;ubuntu--debian&quot;&gt;Ubuntu / Debian&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fedora&quot;&gt;Fedora&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;centos--rhel&quot;&gt;Centos / RHEL&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mac&quot;&gt;Mac&lt;/h2&gt;
&lt;p&gt;You can install git using brew package manager as follows.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or, you can install as follows:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Download git for mac from &lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;this link&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Execute the installer and follow the steps to install git into mac.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, I would prefer to use brew because you can update the application easily by just executing &lt;code class=&quot;highlighter-rouge&quot;&gt;brew update&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download git for windows using &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;this link&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Execute the installer and follow the steps to install git into windows.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Kernel-based Virtual Machine (KVM)</title><link href="http://localhost:4000/linux/kvm/intsall-kvm-on-linux/" rel="alternate" type="text/html" title="Kernel-based Virtual Machine (KVM)" /><published>2019-01-08T00:00:00+05:30</published><updated>2018-01-08T18:35:34+05:30</updated><id>http://localhost:4000/linux/kvm/intsall-kvm-on-linux</id><content type="html" xml:base="http://localhost:4000/linux/kvm/intsall-kvm-on-linux/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/kernel-based-virtual-machine/kernel-based-virtual-machine.png&quot; alt=&quot;simple-home-automation&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I first installed Windows, when I was in 7th standard. It was Windows XP. That time, I really loved to use different operating systems. But, during those days I didn’t know how to use multiple operating systems as virtual machines until I reached by the 11th standard. That time, I was using Windows 7 ultimate and I wanted to use Windows Vista for knowing the experience and Windows XP for feeling the nostalgia. I started surfing the internet for solutions. One of the solutions was to use VirtualBox. I installed VirtualBox and installed both the operating systems and started using both of them. It was going well at first. But after a few days, I started noticing lags and graphics issues. I went along till my BCA first year. When I got my first Laptop (Lenovo Y50-70), I started searching for alternatives for VirtualBox and came across VMWare. VMWare fixed many of the issues, but it was a trail pack and had to pay money to use it. So, I switched back to VirtualBox. It went on till my MCA. During my first year of MCA, I uninstalled Windows 10 completely and installed Fedora. I installed VirtualBox for Virtualization. I was then suggested by my senior, &lt;a href=&quot;https://karuvally.github.io/&quot;&gt;Ashwin Babu Karuvally&lt;/a&gt; that KVM is better than VirtualBox. I started surfing the internet for KVM and I solved many issues that I faced while using VirtualBox.&lt;/p&gt;

&lt;h1 id=&quot;what-is-kvm&quot;&gt;What is KVM?&lt;/h1&gt;

&lt;p&gt;Kernel-based Virtual Machine is an open source virtualization technology built into Linux. KVM is an alternative for using VirtualBox or VMWare. KVM helps to convert the Linux host system (Your machine) into a hypervisor that can run multiple operating systems as individual and independent virtual environments. These virtual environments are called guest machines or virtual machines. To understand how KVM works, we need to know what KVM is and how it works?&lt;/p&gt;

&lt;h1 id=&quot;what-is-hypervisor&quot;&gt;What is Hypervisor?&lt;/h1&gt;

&lt;p&gt;The hypervisor can be a software or hardware that can run virtual machines. The hypervisor provides a virtual operating environment for running the operating systems. Using hypervisor, a user can run any operating system on the host system. There are mainly 2 types of hypervisors:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Type-1: Bare-metal hypervisors&lt;/li&gt;
  &lt;li&gt;Type-2: Hosted hypervisors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/kernel-based-virtual-machine/type-hypervisor.png&quot; alt=&quot;Types-of-hypervisor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A type-1: Bare-metal hypervisor is a type of hypervisor communicates directly with the host’s hardware. That is, the guest machine’s hardware directly communicates with the host’s machine. This type of hypervisors are fast and have least delay time. When the user triggers a command in guest operating system, it sends the command to the hypervisor and the hypervisor sends the command to the host’s hardware. Kernel-based Virtual Machine (KVM), Red Hat Enterprise Virtualization (RHEV), XenServer, Microsoft Windows Server 2012 Hyper-V and VMware vSphere are examples of this type of hypervisors.&lt;/p&gt;

&lt;p&gt;A type-2: Hosted hypervisor is a type of hypervisor communicates using the host operating system. A hosted hypervisor creates each running instance of the guest machine as a process in the host operating system. So for every request from the guest operating system goes to the host operating system and from there to the hardware. This communication takes time to execute each request. These kinds of hypervisors are not efficient in terms of performance. This type of hypervisor is also called hosted hypervisors. Oracle VirtualBox, VMWare Workstation and Windows Virtual PC are examples of this type of hypervisor.&lt;/p&gt;

&lt;h1 id=&quot;why-kvm&quot;&gt;Why KVM&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Free and open source software.&lt;/li&gt;
  &lt;li&gt;Secure as it uses sVirt (Secure virtualization) and SELinux for securing and isolating every guest operating system.&lt;/li&gt;
  &lt;li&gt;Wide hardware support&lt;/li&gt;
  &lt;li&gt;Efficient memory management&lt;/li&gt;
  &lt;li&gt;Scalable&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;requirements-before-installing-kvm&quot;&gt;Requirements before installing KVM&lt;/h1&gt;

&lt;p&gt;Make sure to enable Intel Virtualization Technology (INTEL VT) or AMD-V Technology for Client Virtualization. This setting can be enabled through the system’s BIOS settings.&lt;/p&gt;

&lt;h1 id=&quot;installing-kvm&quot;&gt;Installing KVM&lt;/h1&gt;
&lt;h2 id=&quot;ubuntu-1804&quot;&gt;Ubuntu 18.04&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Lets install KVM and virtual machine manager.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Next we need to find the name of the network interfaces. It will be like enp8s0 or something like that.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we have to edit the network interface’s configuration file to create a network bridge. This bridge will provide internet to all the virtual machines (VM). The file will be empty.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following line.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto lo br0
iface lo inet loopback
iface enp8s0 inet manual
iface br0 inet dhcp
  bridge_ports enp8s0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now we will add the user to appropriate group, so that he can open any KVM without need for root access.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo adduser username libvirt
$ sudo adduser username libvirt-qemu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot your system.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fedora-29&quot;&gt;Fedora 29&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install KVM
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf install @virtualization
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s start the service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start libvirtd
$ sudo systemctl enable libvirtd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, no need to setup network bridge because during installation, the installer will automatically do that.&lt;/p&gt;

&lt;h1 id=&quot;other-methods-to-use-kvm&quot;&gt;Other Methods to use KVM&lt;/h1&gt;
&lt;p&gt;If you want to use KVM on your home server. That is, if you have a server that is used for virtualization only. You can use Proxmox server. Proxmox was first suggested by my senior, &lt;a href=&quot;https://www.tharunpkarun.com/&quot;&gt;Tharun P Karun&lt;/a&gt;. I used proxmox server for my virtualization server. Learn more about proxmox server from &lt;a href=&quot;https://www.proxmox.com/en/&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Simple Home Automation using Pi Zero W, Particle.io, Google assistant and IFTTT</title><link href="http://localhost:4000/raspberry%20pi/home%20automation/simple-home-automation/" rel="alternate" type="text/html" title="Simple Home Automation using Pi Zero W, Particle.io, Google assistant and IFTTT" /><published>2018-12-17T00:00:00+05:30</published><updated>2018-12-17T18:35:34+05:30</updated><id>http://localhost:4000/raspberry%20pi/home%20automation/simple-home-automation</id><content type="html" xml:base="http://localhost:4000/raspberry%20pi/home%20automation/simple-home-automation/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/simple-home-automation/simple-home-automation.png&quot; alt=&quot;simple-home-automation&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Almost everyone’s dream is to have an automated home. But, automated home is expensive and developing on your own is a major task until now. Today we will make simple home automation device using Raspberry Pi Zero W that can automate a switch using relays.&lt;/p&gt;

&lt;h1 id=&quot;hardware-requirements&quot;&gt;Hardware Requirements&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Raspberry Pi Zero W - 1&lt;/li&gt;
  &lt;li&gt;2 - Channel relay&lt;/li&gt;
  &lt;li&gt;Some wires&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;software-requirements&quot;&gt;Software Requirements&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Particle.io account&lt;/li&gt;
  &lt;li&gt;IFTTT application&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;things-to-know-before-the-build&quot;&gt;Things to know before the build&lt;/h1&gt;

&lt;h2 id=&quot;particleio-pin-diagram&quot;&gt;Particle.io Pin diagram&lt;/h2&gt;

&lt;p&gt;The pin numbering of particle.io on Raspberry Pi is different from the standard one. The below diagram will explain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/simple-home-automation/particle-io-pin-diagram.png&quot; alt=&quot;Particle.io Pin Diagram&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;instructions&quot;&gt;Instructions&lt;/h1&gt;

&lt;h2 id=&quot;1-initial-step&quot;&gt;1. Initial step&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to github and to &lt;a href=&quot;https://github.com/Sashuu6/my-room-automation-project&quot;&gt;this link&lt;/a&gt; and fork the github repository.&lt;/li&gt;
  &lt;li&gt;Download the repository to your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-particleio&quot;&gt;2. Particle.io&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Goto to particle.io webIDE using &lt;a href=&quot;https://build.particle.io/build/new&quot;&gt;this link&lt;/a&gt;.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/particle-io-1.png&quot; alt=&quot;Particle.io Pin Diagram&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add title and copy the code from the downloaded repository (present in code/main_program/main_program.ino) and paste it on the code editor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on the compile ( present at left, above the folder symbol).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-setup-raspberry-pi-zero-w&quot;&gt;3. Setup Raspberry Pi Zero W&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://www.balena.io/etcher/&quot;&gt;etcher&lt;/a&gt; and install it on your system.&lt;/li&gt;
  &lt;li&gt;Download raspberry pi stretch &lt;a href=&quot;https://downloads.raspberrypi.org/raspbian_lite_latest&quot;&gt;image&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Flash the image to an SD card via the etcher.&lt;/li&gt;
  &lt;li&gt;Remove and insert sdcard into the system.&lt;/li&gt;
  &lt;li&gt;Create a file ssh inside boot.&lt;/li&gt;
  &lt;li&gt;Create another file named wpa_supplicant.conf inside boot and add the following code to insert Wi-Fi credentials.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
network={
 ssid=&quot;YOUR_NETWORK_NAME&quot;
 psk=&quot;YOUR_PASSWORD&quot;
 key_mgmt=WPA-PSK
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Replace YOUR_NETWORK_NAME with your WiFi’s ssid and YOUR_PASSWORD with it’s password.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, insert the sdcard inside the Raspberry Pi Zero W and fire up the Pi.&lt;/li&gt;
  &lt;li&gt;Find the Raspberry Pi’s IP address. You can do that by using applications like Fing.&lt;/li&gt;
  &lt;li&gt;now ssh to the Pi using your Linux or Mac system. If you are using Windows ( First of all goto hell because you are using Windows), then download putty to ssh to the Pi.&lt;/li&gt;
  &lt;li&gt;To SSH into the Pi.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh pi@ipaddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, update and upgrade the Pi.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt update &amp;amp;&amp;amp; apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install particle.io client into the Pi.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bash &amp;lt;( curl -sL https://particle.io/install-pi )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You will be asked to enter your particle.io username and password. Also add the name of the Pi. Now the Pi is setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now upload the code to the Pi (Present on the left side of the WebIDE).
&lt;img src=&quot;/assets/images/blog/simple-home-automation/particle-io-2.png&quot; alt=&quot;Particle.io Pin Diagram&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-connecting-relay-with-raspberry-pi-zero-w&quot;&gt;4. Connecting relay with Raspberry Pi Zero W&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Connect D0 of Raspberry Pi (Refer pin diagram from above) to relay 1.&lt;/li&gt;
  &lt;li&gt;Connect D1 of Raspberry Pi to relay 2.&lt;/li&gt;
  &lt;li&gt;Connect 5v for relay’s power.&lt;/li&gt;
  &lt;li&gt;Connect GND of Pi to GND of the 2 relays.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/simple-home-automation/complete-image.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-setup-ifttt&quot;&gt;5. Setup IFTTT&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Click ‘+’ from the app.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/0.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Click ‘this’.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/1.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Search google assistant and click on it.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/2.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Click ‘say a simple phrase’.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/3.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Specify the credentials as below.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/4.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Click ‘that’.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/5.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;search and select ‘particle.io’.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/6.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Specify the function name.
&lt;img src=&quot;/assets/images/blog/simple-home-automation/7.jpg&quot; alt=&quot;Final image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Repeat the same for the other functions functions like bulboff, tubelight on and tubelight off.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s done. Now command your google assistant to turn on tubelight and see the wonder.
Watch the following video for demo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=qlP8LjUNwF8&quot; title=&quot;Home automation Video&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/qlP8LjUNwF8/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">PHP and MySQL Installation and Why no need for Web Server</title><link href="http://localhost:4000/web/PHP-installation/" rel="alternate" type="text/html" title="PHP and MySQL Installation and Why no need for Web Server" /><published>2018-11-15T00:00:00+05:30</published><updated>2018-11-15T18:35:34+05:30</updated><id>http://localhost:4000/web/PHP-installation</id><content type="html" xml:base="http://localhost:4000/web/PHP-installation/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/setting-Up-localhost.jpg&quot; alt=&quot;setting-up-localhost&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-setup-localhost&quot;&gt;Why setup localhost&lt;/h1&gt;

&lt;p&gt;PHP: Hypertext Pre-Processor is an open-source server-side scripting language used for web development. If you are reading this blog, it’s pretty evident that you know how to use PHP and you are now trying to install PHP in your computer. As PHP is a server-side scripting language, the developer can run any PHP code via the browser.&lt;/p&gt;

&lt;h1 id=&quot;usual-php-installation&quot;&gt;Usual PHP installation&lt;/h1&gt;

&lt;p&gt;Usually, for working on PHP, the developer has to install:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Web Server&lt;/li&gt;
  &lt;li&gt;MySQL (if you are using database)&lt;/li&gt;
  &lt;li&gt;PHP&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;types-of-installation&quot;&gt;Types of Installation&lt;/h1&gt;

&lt;p&gt;Depending on your operating system, the installatio can be classified into:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;MAMP Server (Mac, Apache2, MySQL, PHP)&lt;/li&gt;
  &lt;li&gt;LAMP Server (Linux, Apache2, MySQL, PHP)&lt;/li&gt;
  &lt;li&gt;WAMP Server (Windows, Apache2, MySQL, PHP)&lt;/li&gt;
  &lt;li&gt;X-AMPP Server (Any Operating system, Apache2, MySQL, PHP, Perl)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;why-install-web-server-or-why-not-install-web-server&quot;&gt;Why Install Web Server or Why not Install Web Server&lt;/h1&gt;

&lt;p&gt;Web server is required if you are setting up a server. If you are setting up for development. You can run your PHP code using the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ php -S 0.0.0.0:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After executing the command, you can open the address in your browser to open your site.&lt;/p&gt;

&lt;h1 id=&quot;installing-mamp-server&quot;&gt;Installing MAMP Server&lt;/h1&gt;

&lt;p&gt;I have already written a blog on how to setup a server on Mac in &lt;a href=&quot;https://www.sashwat.in/linux/macos/setup-localhost-mac/&quot;&gt;this link&lt;/a&gt;. Just skip install web server (Apache) (If for setting up localhost). There is another way to install a MAMP server. There is a application named MAMP server that can be used to activate web server on a click. To install, goto &lt;a href=&quot;https://www.mamp.info/en/&quot;&gt;this link&lt;/a&gt;. Just install the .dmg and follow the instructions to install the MAMP server.&lt;/p&gt;

&lt;h1 id=&quot;installing-lamp-server&quot;&gt;Installing LAMP Server&lt;/h1&gt;

&lt;h2 id=&quot;fedora&quot;&gt;Fedora&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;First, we will update the system.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s install web server (Dont install if for localhost).
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s start the httpd service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service httpd start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we will install MySQL for working on databases.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install mysql mysql-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we will start MySQL service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service mysqld start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we have to setup root password for MySQL.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/bin/mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s install PHP.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install php php-mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we have to configure the server and MySQL service to start automatically after every boot. If for localhost, don’t configure the server. Just configure MySQL.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chkconfig httpd on
$ sudo chkconfig mysqld on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;For server, to check, we will create a PHP file in web home directory.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nano /var/www/html/info.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To check if PHP is working, we will run phpinfo().
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo echo &quot;&amp;lt;?php phpinfo(); ?&amp;gt;&quot; &amp;gt;&amp;gt; /var/www/html/info.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open browser and goto localhost/info.php. If PHP not working, you will get a blank page or the php code will be visible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you want to use phpmyadmin, install phpmyadmin by using the following command. If you are using phpmyadmin, then you have to install web server.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf -y install phpMyAdmin php-mysqlnd php-mcrypt php-php-gettext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart apache server.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl restart httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rhel--centos&quot;&gt;RHEL / CentOS&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Update the system.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install web server.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add firewall exception to HTTP service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ firewall-cmd --permanent --add-service=http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we have to restart firewall to implement changes.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ systemctl restart firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we open port 80 in firewall.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ firewall-cmd —add-port=80/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we will install PHP.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install php php-mysql php-pdo php-gd php-mbstring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We will check if PHP is working by running phpinfo().
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;&amp;lt;?php phpinfo(); ?&amp;gt;&quot; &amp;gt;&amp;gt; /var/www/html/info.php 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Now check if PHP is working by opening localhost/info.php in your browser.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we will install mariaDB for database.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install mariadb-server mariadb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Start the database service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start mariadb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we have to setup root password for MySQL.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To install phpmyadmin.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm
$ sudo yum install phpmyadmin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We have to edit phpmyadmin configuration file.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nano /etc/httpd/conf.d/phpmyadmin.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Remove # (comment) from the following lines inside the file.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Order Deny,Allow
Deny from all
Allow from 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now we have to enable httpd and mariadb so that they will start automatically after every boot.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ systemctl enable mariadb
$ systemctl enable httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;installing-wampserver&quot;&gt;Installing WAMPSERVER&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Download Wampserver using &lt;a href=&quot;http://www.wampserver.com/en/#download-wrapper&quot;&gt;this link&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Open installation file and follow the steps to install it to the system.&lt;/li&gt;
  &lt;li&gt;Open wampserver to enable webserver, database and PHP.&lt;/li&gt;
  &lt;li&gt;To check if wampserver is working, goto http://localhost in the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;installing-xampp-server&quot;&gt;Installing XAMPP server&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Download XAMPP using &lt;a href=&quot;https://www.apachefriends.org/index.html&quot;&gt;this link&lt;/a&gt;. Download the installation file for your operating system.&lt;/li&gt;
  &lt;li&gt;Install it by following the instructions.&lt;/li&gt;
  &lt;li&gt;Open XAMPP to enable apache, mysql and php.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">DevOps Tool : Docker</title><link href="http://localhost:4000/devops/docker/devops-tool-docker/" rel="alternate" type="text/html" title="DevOps Tool : Docker" /><published>2018-11-01T00:00:00+05:30</published><updated>2018-12-01T18:35:34+05:30</updated><id>http://localhost:4000/devops/docker/devops-tool-docker</id><content type="html" xml:base="http://localhost:4000/devops/docker/devops-tool-docker/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/devops-tool-docker/devops-tool-docker.png&quot; alt=&quot;Docker&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Docker is a tool used to perform operating system level virtualization (a.k.a containerization). The docker helps to run software through different containers. Many companies like Paypal, VISA and many more are using Docker to run their products.
I first encountered docker when I was exploring DevOps and the tools under DevOps. Docker got my attention and I started learning docker and guess what? I fell in love with it. The concept of containerization and how docker helped me to create containers very easily really fascinated me.&lt;/p&gt;

&lt;h1 id=&quot;why-docker&quot;&gt;Why Docker&lt;/h1&gt;

&lt;p&gt;I just conveyed what docker is? and what is the purpose? Now we will discuss, why docker? The main issue that a Developer will face during his career is, the code not working in production server. But, it works just fine in their system. This issue is called environment issue. This issue is due to the difference in the configuration in the developer’s PC and the server. Docker solves this issue by making a virtual environment with all the necessary dependencies. This step helps to solve the dependency issue. The other advantage of docker is the easy implementation of micro-services. Micro-services are the processes that communicate through a network. The communication is basically client-server communication (but done in small chunks).&lt;/p&gt;

&lt;h1 id=&quot;why-implement-mirco-services&quot;&gt;Why implement Mirco-services?&lt;/h1&gt;

&lt;p&gt;The main advantage of implementing micro-services is the easy maintainability. Implementing micro-services helps to break the application into different chunks or pieces. These chunks or pieces are called services. These services are built in such a way that they have maximum cohesion and least coupling. Cohesion is the communication of different modules inside the service and coupling is the communication between 2 services. So, each service can be assigned to a different developer. As each developer assigns different dependencies ( depending on the application’s need, personal preference and many more reasons), the docker file can incorporate these dependencies easily.
Before using Docker to implement micro-services, virtual machines where used. A virtual machine is an emulation of an actual PC. We can create virtual systems and install operating systems to run it. So to setup micro-services, the team had to create virtual machines (VM) and install operating systems and then run the service. That is, each service will be running on different virtual machines. Virtual machines can be made using applications like VirtualBox, VMware and many more. But, the best application for using virtual machines is KVM (Kernel Virtual Machine). But, KVM is only available to Linux. The main disadvantages of using VMs is that the developer has to specify the memory, processor count and disk space. The virtual machine will use these resource from the host machine even if the VM doesn’t need it. The other disadvantage of using virtual machines is that it becomes impractical when working on a large scale implementation. On the other hand, using Docker helps in easy implement of micro-services. Each docker container can be easily programmed to be a service. Docker doesn’t require any preallocation of memory, the container will automatically allocate the necessary resources dynamically.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-docker&quot;&gt;What is a Docker?&lt;/h1&gt;

&lt;p&gt;Docker is a simple tool that has been designed in such a way that it can create, deploy and run applications or services using containers. It is considered as a lightweight alternative to VMs. The docker requires a host machine to work and can allocate its RAM dynamically.&lt;/p&gt;

&lt;h1 id=&quot;advantages-of-docker&quot;&gt;Advantages of Docker&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Rapid application development:  The docker containers require fewer runtime resources and require the least storage. Due to this form factor, they are very easy to deploy.&lt;/li&gt;
  &lt;li&gt;Portability: The services can be easily deployed in any servers via docker.&lt;/li&gt;
  &lt;li&gt;Version control: Just like Git, Docker container is version controlled. The developer can track the versions of Docker container (service). As Docker has version control, the developer can inspect changes in the file and can rollback changes.&lt;/li&gt;
  &lt;li&gt;Sharing: You can share your docker file with others through DockerHub. It is a remote repository to store docker files.&lt;/li&gt;
  &lt;li&gt;Secure: If the docker file fails, it won’t affect the whole application. That is, a failed docker won’t crash the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-to-use-docker-work&quot;&gt;How to use Docker work?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/devops-tool-docker/docker-working.png&quot; alt=&quot;Docker Working&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A developer will develop a service and convert the service into a container using Docker. This process is done by creating a docker file, which in turn becomes an image. The developer will then add the dependencies for this service by creating or adding docker images to the file. Eg: For running a web-based application, the developer will add Nginx server docker image and PHP docker image. When the developer runs the docker file, these images work together to run the program. The docker image when run, generates a docker container. After the successful running of the docker container, the developer can push the docker image to DockerHub. He can then pull the docker image remotely from any computer and run the docker file there. If the developer had developed a docker file for the production server, he can easily pull the image from DockerHub and run the image in the server.&lt;/p&gt;

&lt;h1 id=&quot;docker-components&quot;&gt;Docker Components&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Docker Registry: Docker registry is the storage for all the docker images. These images can be public or private. The registry can be cloud-based or local. DockerHub is a cloud-based Docker registry.&lt;/li&gt;
  &lt;li&gt;Docker image: A Docker image is a read-only template to create Docker containers. Docker image is built in such a way that it incorporates all the dependencies of the developed application.&lt;/li&gt;
  &lt;li&gt;Docker container: A docker container is a running instance of a Docker image. A container can be a combination of more than one docker image.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;docker-bundle&quot;&gt;Docker Bundle&lt;/h1&gt;

&lt;p&gt;The docker application consists of 4 software:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Docker engine: Docker engine creates and runs Docker containers.&lt;/li&gt;
  &lt;li&gt;Docker CLI Client: Docker CLI client is the command-line interface to interact with Docker.&lt;/li&gt;
  &lt;li&gt;Docker Compose: Docker compose is used to define and run multi-container Docker applications.&lt;/li&gt;
  &lt;li&gt;Docker Machine: Docker machine is an application that lets the developer install docker engine on virtual hosts and helps the developer to manage the virtual hosts.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;docker-editions&quot;&gt;Docker Editions&lt;/h1&gt;

&lt;p&gt;There are two Docker editions:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Docker CE (Community Edition): Docker CE is for the developers who have started learning docker.&lt;/li&gt;
  &lt;li&gt;Docker EE (Enterprise Edition): Docker EE is for enterprise level development.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;docker-installation&quot;&gt;Docker Installation&lt;/h1&gt;

&lt;h2 id=&quot;mac&quot;&gt;Mac&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download Docker for Mac using &lt;a href=&quot;https://download.docker.com/mac/beta/Docker.dmg&quot;&gt;this link&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Install Docker from dmg.&lt;/li&gt;
  &lt;li&gt;After installation, open docker from applications.&lt;/li&gt;
  &lt;li&gt;After opening, the docker whale will be available in Mac’s status bar.&lt;/li&gt;
  &lt;li&gt;Open ‘about Docker Desktop’  to know the docker engine’s version and other relevant information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/devops-tool-docker/about-docker-mac.png&quot; alt=&quot;Docker Mac&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ubuntu--debian&quot;&gt;Ubuntu / Debian&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;First, we will update the repositories.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We will install the dependencies for Docker to work.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install linux-image-extra-$(uname -r ) linux-image-extra-virtual -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We will now install docker on the machine.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install docker-engine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;After installation, we have to start docker service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service docker start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fedora&quot;&gt;Fedora&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install dnf-plugins-core to manage Fedora’s repositories.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf -y install dnf-plugins-core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add Docker repository to the machine.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf config-manager \
 --add-repo \
 https://download.docker.com/linux/fedora/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Docker-CE
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf install docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Start docker service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To start, stop, restart and get status about Docker, use the respective commands.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start docker.service ## &amp;lt;-- Start docker ##
$ sudo systemctl stop docker.service ## &amp;lt;-- Stop docker ##
$ sudo systemctl restart docker.service ## &amp;lt;-- Restart docker ##
$ sudo systemctl status docker.service ## &amp;lt;-- Get status of docker ##
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rhel--centos&quot;&gt;RHEL / CentOS&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Docker repo is already available in yum repository.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable Docker service.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl enable docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To start, stop, restart and get status about Docker, use the respective commands.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start docker.service ## &amp;lt;-- Start docker ##
$ sudo systemctl stop docker.service ## &amp;lt;-- Stop docker ##
$ sudo systemctl restart docker.service ## &amp;lt;-- Restart docker ##
$ sudo systemctl status docker.service ## &amp;lt;-- Get status of docker ##
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;working-with-docker&quot;&gt;Working with Docker&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Pulling an image.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker pull docker-image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run a Docker image.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run docker-image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;View Docker images.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker ps -as
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;or&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo container ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Remove Docker containers
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker rm image-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Remove Docker image
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker image rm image-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Things to do after installing RHEL 7</title><link href="http://localhost:4000/linux/rhel/things-to-do-after-installing-rhel-7/" rel="alternate" type="text/html" title="Things to do after installing RHEL 7" /><published>2018-10-24T00:00:00+05:30</published><updated>2018-10-24T18:35:34+05:30</updated><id>http://localhost:4000/linux/rhel/things-to-do-after-installing-rhel-7</id><content type="html" xml:base="http://localhost:4000/linux/rhel/things-to-do-after-installing-rhel-7/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/things-to-do-after-installing-rhel-7.png&quot; alt=&quot;RHEL7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The RHEL is RedHat Enterprise Linux,  a server distribution of Linux. RHEL is not like other Linux distribution because you have to pay money for the company’s services. But, the Operating System is free to use. The latest version of RHEL is RHEL 7.
The following things where the first things I did, after install RHEL 7 on my virtual machine.
First, we have to do is enable RedHat subscription. I subscribed for a developer account through the RedHat website and developer subscription is free. Our machine should be registered for doing anything. This registration can be done using a package called subscription manager. Follow the steps to register your machine.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ subscription-manager register --username your_username --password your_password --auto-attach&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ subscription-manager list --available&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ subscription-manager list&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ subscription-manager service-level --list&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ subscription-manager service-level --set=self-support&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we need to enable yum repositories to install any applications via the repo list. The following steps will enable yum repositories.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ subscription-manager repos --list&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ yum repolist all&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ yum repolist&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ vi /etc/yum.repos.d/redhat.repo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Uncomment all the repositories you need for your system.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum repolist all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let’s update your RHEL 7 system.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we need to change the system’s hostname. If you have done it during your RHEL 7 installation, then this step is not necessary.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ echo hostname&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ nano /etc/hostname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change the name to any name and save it. Just reboot the system to see the changes in your hostname.
We will now install an interesting application, this application can be used to view websites via the terminal. The view won’t be appealing but can be used for basic needs. To install links, type the following command.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install links&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we will set up a local server in your system. To do that, we will have to install Apache server, PHP and MySQL. I am using PHP 5.6 because many of the functions that I used got deprecated after PHP 5.6 like mcrypt and many more. 
Let’s install the Apache server.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install httpd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we have to open port in the firewall for the HTTPD in the server.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --add-service=http&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --permanent --add-port=80/tcp&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will restart and enable HTTPD service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ systemctl restart httpd.service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ systemctl start httpd.service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ systemctl enable httpd.service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s check if the server is up.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ links &amp;lt;your_ip_address&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see apache server page, then your server is up and running.
Now, we will enable indexing in the server.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ nano /etc/httpd/conf.d/welcome.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file, search for set -indexes and change it to set +indexes. If it is commented, then uncomment it by removing # from it.&lt;/p&gt;

&lt;p&gt;Now we will restart apache to apply the changes.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ systemctl restart httpd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we will install PHP 5.6.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum search php&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ yum install -y php56w php56w-opcache php56w-xml php56w-mcrypt php56w-gd php56w-devel php56w-mysql php56w-intl php56w-mbstring&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will check, if PHP is working on our system or not.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ echo -e &quot;&amp;lt;?php\nphpinfo();\n?&amp;gt;&quot; &amp;gt;&amp;gt; /var/www/html/phpinfo.php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check if the php file is working, just type:-&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ links http://&amp;lt;ip_address&amp;gt;/phpinfo.php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will install mariaDB.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install mariadb-server mariadb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will start mariaDB service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ systemctl start mariadb.service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ systemctl enable mariadb.service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To access the database via the terminal (I dont prefer phpmyadmin).&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ mysql -u root -p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, lets install gcc (C++ compiler) in the system.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install gcc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, let’s install java.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will install Apache Tomcat.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install tomcat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s start tomcat.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ systemctl start tomcat&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ systemctl enable tomcat.service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to open a port on our firewall. To do that:-&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --zone=public --add-port=8080/tcp --permanent&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s install nmap. The nmap is an open-source security scanner.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install nmap&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To download files from the internet, we use wget. We will now install wget.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install wget&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To unzip files, we need unzip. To install unzip, do the following:-&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install unzip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will install an exploit and backdoor scanner called rootkit hunter.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ yum install rkhunter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start the scanner, just type.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ rkhunter --check&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you have a server, you need to have a web panel. We will install a Webmin for satisfying that purpose.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ wget http://prdownloads.sourceforge.net/webadmin/webmin-1.740-1.noarch.rpm&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ rpm -ivh webmin-1.740-1.noarch.rpm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we have to open the port for accessing it remotely via a web browser.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --zone=public --add-port=10000/tcp --permanent&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ firewall-cmd --reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">My Take On DevOps</title><link href="http://localhost:4000/devops/my-take-on-devops/" rel="alternate" type="text/html" title="My Take On DevOps" /><published>2018-10-17T00:00:00+05:30</published><updated>2018-10-17T18:35:34+05:30</updated><id>http://localhost:4000/devops/my-take-on-devops</id><content type="html" xml:base="http://localhost:4000/devops/my-take-on-devops/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/my-take-on-devops/devops-cover.png&quot; alt=&quot;DevOps&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-devops&quot;&gt;What is DevOps?&lt;/h2&gt;

&lt;p&gt;I heard this term first when I was doing my internship at Appfabs. They focused on DevSecOps as they were a Security based company. So, to understand DevSecOps, I had to know what is DevOps. The first thing I was told that DevOps is a methodology, not a technology. DevOps is a methodology used in SDLC (Software Development Life Cycle) where the development team and operations team work together from designing stage to production support. To understand DevOps and why DevOps was introduced, we need to know the methods used before DevOps was introduced.&lt;/p&gt;

&lt;p&gt;All these started when the waterfall model was introduced into SDLC. This model was best suited when:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The product requirements are clear and fixed.&lt;/li&gt;
  &lt;li&gt;The product definition is stable. That is, the product’s client has a clear cut idea on how the product must be.&lt;/li&gt;
  &lt;li&gt;The project has very least risk during development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The main disadvantages using this method was:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It was slow.&lt;/li&gt;
  &lt;li&gt;Change implement was slow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As in software field, slow means loss. Using this method in huge and sensitive projects gave companies huge losses.
Keeping the disadvantages in mind, a new model was introduced that could fix all the disadvantages of the waterfall model. Thus, came the Agile methodology.
Agile methodology brought continuous iteration in product development and testing throughout the SDLC.&lt;/p&gt;

&lt;p&gt;The Agile methodology is bested when:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The product requirements frequently change.&lt;/li&gt;
  &lt;li&gt;The product requires faster development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And guess what? even this method didn’t work out for many companies, due to:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Lack of agility in the operations phase of the product lifecycle.&lt;/li&gt;
  &lt;li&gt;The issue in the code environment. That is, the code works perfectly fine in developer’s PC, but won’t work on the production environment (Server).&lt;/li&gt;
  &lt;li&gt;The deployment of the product is linear.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To solve the disadvantages in agile methodology, the DevOps was introduced. The DevOps was best suited when:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The product’s requirement changed frequently.&lt;/li&gt;
  &lt;li&gt;When the Operations team needs to become agile.&lt;/li&gt;
  &lt;li&gt;For bridging the gap between the development team and the operations team.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To understand DevOps better, we will learn a case study of a big shot company like Facebook who finally used DevOps due to their product’s need. In 2011, Facebook introduced a major update that includes many cool features like timeline support, music support and many more. The public was notified about this new release. As Facebook as a huge hit during that time, all the active Facebook users (almost 500 million) started using Facebook to use these features. As Facebook’s servers during that time were not prepared to handle this huge traffic, it got shut down causing a server meltdown. Added to this major issue, the new features got a mixed opinion among the users. That is, many users loved it, other users absolutely hated it and few requested for modification. These kinds of reaction created a chaotic situation in Facebook headquarters. To solve this issue, they brought in DevOps and introduced a technique called “Dark Launching”. The “Dark Launching” is a type of product release technique in which:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;New features will be first released to a smaller group of users (mainly internal BETA testers). There will be constant communication between the team and the BETA testers. The communication involves taking feedback and other techniques that help to improve the features to the user’s need.&lt;/li&gt;
  &lt;li&gt;When the team gets an assurance that the features can be released to the public, they release it to public BETA and then to the public through multiple product releases.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/my-take-on-devops/devops-fb-example.png&quot; alt=&quot;Facebook dark launching&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Facebook achieves “Dark Launching” via the use of the delivery pipeline. A delivery pipeline is a set of steps that a code goes through till it reached production. A pipeline contains an automated building, testing and deploying tools that work together till the product’s release.&lt;/p&gt;

&lt;p&gt;So after learning a case, we can say that “DevOps is a software development approach that involves continuous development, testing, integration, deployment and monitoring throughout the development cycle.”&lt;/p&gt;

&lt;h2 id=&quot;devops-lifecycles&quot;&gt;DevOps Lifecycles&lt;/h2&gt;

&lt;p&gt;The lifecycle represents the stages in DevOps:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Continuous Development: The continuous development involves the product’s development is split into smaller development cycles.&lt;/li&gt;
  &lt;li&gt;Continuous Testing: This cycle involves the Quality Assurance team identifying any bugs or errors in the code after every development cycle.&lt;/li&gt;
  &lt;li&gt;Continuous Integration: This cycle involves integrating the new code with the existing code present in the production environment.&lt;/li&gt;
  &lt;li&gt;Continuous Deployment: This cycle involves the deployment of code into the environment. The deployment is done in such a way that, it doesn’t affect the product’s current network traffic.&lt;/li&gt;
  &lt;li&gt;Continuous Monitoring: The monitoring helps the team to monitor changes in the application after every lifecycle.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;devops-tools&quot;&gt;DevOps Tools&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/my-take-on-devops/devops-tools.png&quot; alt=&quot;DevOps tools from edureka&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main advantage that DevOps gave us is “Automation”. The developer can automate the whole operations process in the software lifecycle. Automation in DevOps is achieved using tools at different stages of its cycle.
The following tools (that I have used) are used at different stages:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Plan - Jira&lt;/li&gt;
  &lt;li&gt;Code - Git&lt;/li&gt;
  &lt;li&gt;Build - Gradle, Maven&lt;/li&gt;
  &lt;li&gt;Test - Selenium, JUnit&lt;/li&gt;
  &lt;li&gt;Integrate - Jenkins&lt;/li&gt;
  &lt;li&gt;Deploy - Docker&lt;/li&gt;
  &lt;li&gt;Operate - Ansible&lt;/li&gt;
  &lt;li&gt;Monitor - Nagios, slack&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s consider an example of a company that has implemented DevOps methodology in their product and have used few tools for automation. The tool Jenkins (integration tool) detects changes in code and automatically triggers a build using tools like Gradle or Maven. After the build, Jenkins will deploy the code for testing. The testing is done by test tools like Selenium (if web app), JUnit (For Java apps) or any other testing tool. The deployment is handled using Docker. The running code is then monitored by tools like Nagios, Splunk or ELK Slack.&lt;/p&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Setup Localhost in MacOS</title><link href="http://localhost:4000/linux/macos/setup-localhost-mac/" rel="alternate" type="text/html" title="Setup Localhost in MacOS" /><published>2018-10-11T00:00:00+05:30</published><updated>2018-10-11T18:35:34+05:30</updated><id>http://localhost:4000/linux/macos/setup-localhost-mac</id><content type="html" xml:base="http://localhost:4000/linux/macos/setup-localhost-mac/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/localhost-on-mac.jpg&quot; alt=&quot;Localhost in mac&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I first started developing commerial products using HTML, CSS, Javascript and many more languages that were used to code client-side of a web application. I first encountered server-side languages while having a technical conversation with one of my seniors. This conversation motivated to learn PHP. While surfing the internet, I found we couldn’t execute server-side languages like client-side. That is, I couldn’t see the output just by executing the code via a browser. To execute server-side languages like PHP, I had to establish a server inside my mac.&lt;/p&gt;

&lt;p&gt;The following are the steps I used to setup a localhost on my mac.
On mac, we dont have to install a server, it’s already pre-installed. We just have to enable it.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo apachectl start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check whether the server is not running or not, go to http://localhost on the mac’s browser.
PHP is also preinstalled on mac, we just have to enable it.
First, we have to edit the server’s config file.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo nano /etc/apache2/httpd.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will search for PHP in this file using ctrl+w
Remove # from the below line.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;LoadModule php7_module libexec/apache2/libphp7.so&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart apache server&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo apachectl restart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have a create a folder named “Sites” on the home directory.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo mkdir /Users/&amp;lt;--your_username--&amp;gt;/Sites&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets save a file named index.php with the following contents.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;&amp;lt;?php echo &quot;Hello From Sites Folder!”; phpinfo();?&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to add the Sites fold on the config file. Edit the file using the following command.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo nano /etc/apache2/httpd.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the file, search for the word “library” using ctrl+w.
Replace /Library/WebServer/Documents with /Users/&amp;lt;–your_username–&amp;gt;/Sites
Now, we need a database and a DBMS for the localhost. Lets download mysql for mac.
First we will download MySQL from &lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot;&gt;this link&lt;/a&gt;.
Install MySQL from dmg file.
Now, we will configure MqSQL by opening MySQL from system preferences. Add a password and click legacy password. After this step, just click “start MySQL server”.
You can use sql through bash by executing the following command.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ /usr/local/mysql/bin/mysql -u root -p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can use Sequel pro. Sequel pro is an application that can be used to any database remotely. That is, it can be used to connect to localhost and anyother server established on the network.
Now, we will make the server communication encrypted. That is, we will enable SSL/HTTPS on localhost. Execute the following command to edit the config file.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo nano /etc/apache2/httpd.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Search for socache_shmcb_module using ctrl+w.
Remove # from the following lines.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;socache_shmcb_module libexec/apache2/mod_socache_shmcb.so&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;serach for LoadModule ssl_module libexec/apache2/mod_ssl.so and remove # from it.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;LoadModule ssl_module libexec/apache2/mod_ssl.so&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Delete # from Include /private/etc/apache2/extra/httpd-ssl.conf&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;/private/etc/apache2/extra/httpd-ssl.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to replace www.example.com:443 with localhost from the below file.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo nano /etc/apache2/extra/httpd-ssl.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace Library/WebServer/Documents. Replace that with /Users/&amp;lt;–your_username–&amp;gt;/Sites
Add the following lines below &amp;lt;VirtualHost_default_:443&amp;gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;&amp;lt;Directory &quot;/Users/&amp;lt;--your_username--&amp;gt;/Sites&quot;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;Options All&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;MultiviewsMatch Any&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;AllowOverride All&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;Require all granted&lt;/span&gt; 
   &lt;span class=&quot;s&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the following config file.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo nano /etc/ssl/openssl.cnf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines at the end.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;san&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt; 
   &lt;span class=&quot;s&quot;&gt;subjectAltName                  = DNS:localhost&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we generate a key using openSSL.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo openssl req -extensions san -config /etc/ssl/openssl.cnf -x509 -nodes -newkey rsa:4096 -keyout /private/etc/apache2/server.key -out /private/etc/apache2/server.crt -days 365 -subj &quot;/C=your_country/ST=your_state/L=your_city/O=hostname/CN=localhost&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we will add the certificate using the following command.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /private/etc/apache2/server.crt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now just restart the apache server.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ sudo apachectl restart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have not successfully established a server inside Mac.&lt;/p&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Setup wake on LAN on local server</title><link href="http://localhost:4000/linux/networking/wake-on-lan-on-local-server/" rel="alternate" type="text/html" title="Setup wake on LAN on local server" /><published>2018-10-04T00:00:00+05:30</published><updated>2018-09-27T18:35:34+05:30</updated><id>http://localhost:4000/linux/networking/wake-on-lan-on-local-server</id><content type="html" xml:base="http://localhost:4000/linux/networking/wake-on-lan-on-local-server/">&lt;p&gt;&lt;img src=&quot;/assets/images/blog/setup-wake-on-lan.jpg&quot; alt=&quot;WoLAN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Why Wake on LAN? Wake on LAN is program to wake a system which is under deep sleep. That is, the system is shut down with power access. A system with an enabled Wake-on-LAN feature can be turned on using a special packet. This special packet is sent by the client remotely.&lt;/p&gt;

&lt;p&gt;To implement Wake-On-LAN on the server, we need to install ethtool on our server and wakeonlan commanline program on our personal system.&lt;/p&gt;

&lt;p&gt;First we will setup our server:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enable wake-on-LAN on BIOS settings. Enter into BIOS and search for wake on LAN and enable it.
Make sure the ethernet cable connect from the server to the switch or router has all the 8 pins connected. This is because the magic packet is sent via a dedicatd pin, usually last 2 pins.
Install ethtool into the server.&lt;/p&gt;

    &lt;p&gt;(Ubuntu / Debian)&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ sudo apt install ethtool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;(Fedora)&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ sudo dnf install ethtool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;(RHEL / CentOS)&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s&quot;&gt;$ sudo yum install ethtool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now let’s find the name of ethernet port present in the system. This command will also reveal the mac address.&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ ip a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The above command will output the ethernet port name (Lets consider the ethernet name to be enp9s0).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s check if ethtool detects the port.&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ sudo ethtool enp9s0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, let’s activate wake on lan.&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ sudo ethtool -s enp8s0 wol g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we will setup wake on client on your system. i.e, the system that will be used to wake the server.&lt;/p&gt;

    &lt;p&gt;(Ubuntu / Debian)&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ sudo apt install etherwake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;(Mac)&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ brew install wakeonlan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;(Fedora / RHEL / CentOS)&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ wget http://gsd.di.uminho.pt/jpo/software/wakeonlan/downloads/wakeonlan-0.41-0.fdr.1.noarch.rpm&lt;/span&gt; 
&lt;span class=&quot;s&quot;&gt;$ rpm -Uvh wakeonlan-0.41-0.fdr.1.noarch.rpm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we can wake the system using the wakeonlan command.
Execute the following command.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;s&quot;&gt;$ wakeonlan mac-address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command will wake your system.&lt;/p&gt;</content><author><name>Sashwat K</name><email>sashwat0001@gmail.com</email></author><summary type="html"></summary></entry></feed>